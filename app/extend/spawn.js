// Generated by CoffeeScript 1.8.0
module.exports = function() {
  Spawn.prototype.isSpawning = function() {
    return !_.isNull(this.spawning);
  };
  Spawn.prototype.isFull = function() {
    return this.energy === this.energyCapacity;
  };
  Spawn.prototype.canStoreEnergy = function() {
    return !this.isFull();
  };
  Spawn.prototype.addToQueue = function(role) {
    if (this.memory.spawnQueue == null) {
      this.memory.spawnQueue = [];
    }
    return this.memory.spawnQueue.push(role);
  };
  Spawn.prototype.addToPriorityQueue = function(role) {
    if (this.memory.spawnPriorityQueue == null) {
      this.memory.spawnPriorityQueue = [];
    }
    return this.memory.spawnPriorityQueue.push(role);
  };
  Spawn.prototype.getPriorityQueue = function() {
    if (this.memory.spawnPriorityQueue == null) {
      this.memory.spawnPriorityQueue = [];
    }
    return this.memory.spawnPriorityQueue;
  };
  Spawn.prototype.getQueue = function() {
    if (this.memory.spawnQueue == null) {
      this.memory.spawnQueue = [];
    }
    return this.memory.spawnQueue;
  };
  Spawn.prototype.clearQueue = function() {
    this.memory.spawnQueue = [];
    return this.memory.spawnQueue;
  };
  Spawn.prototype.clearPriorityQueue = function() {
    this.memory.spawnPriorityQueue = [];
    return this.memory.spawnPriorityQueue;
  };
  Spawn.prototype.clearQueues = function() {
    this.clearQueue();
    return this.clearPriorityQueue();
  };
  Spawn.prototype.groupQueue = function() {
    var counter;
    counter = {};
    _.forEach(this.getQueue(), function(role) {
      if (counter[role] == null) {
        counter[role] = 0;
      }
      return counter[role] += 1;
    });
    return counter;
  };
  Spawn.prototype.groupPriorityQueue = function() {
    var counter;
    counter = {};
    _.forEach(this.getPriorityQueue(), function(role) {
      if (counter[role] == null) {
        counter[role] = 0;
      }
      return counter[role] += 1;
    });
    return counter;
  };
  Spawn.prototype.defaultCreepQueue = {
    base_harvester: 5,
    cntr_worker1: 3,
    carrier1: 2
  };
  return Spawn.prototype.creepAmountSupport = function() {
    if (!this.isSpawning()) {
      return _.forEach(this.defaultCreepQueue, function(neededRoleCount, role) {
        var i, inGameRoleCount, inQueueRoleCount, _i, _results;
        inGameRoleCount = _.size(Game.creepsByRole(role));
        inQueueRoleCount = this.groupPriorityQueue()[role] || 0;
        if (neededRoleCount > (inGameRoleCount + inQueueRoleCount)) {
          neededRoleCount = neededRoleCount - (inGameRoleCount + inQueueRoleCount);
          if (neededRoleCount > 0) {
            _results = [];
            for (i = _i = 1; 1 <= neededRoleCount ? _i <= neededRoleCount : _i >= neededRoleCount; i = 1 <= neededRoleCount ? ++_i : --_i) {
              _results.push(this.addToPriorityQueue(role));
            }
            return _results;
          }
        }
      }, this);
    }
  };
};
