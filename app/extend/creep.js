// Generated by CoffeeScript 1.8.0
module.exports = function() {
  Creep.prototype.isFull = function() {
    return this.carry.energy === this.carryCapacity;
  };
  Creep.prototype.isEmpty = function() {
    return this.carry.energy === 0;
  };
  Creep.prototype.loadPercentage = function() {
    return Math.floor(this.carry.energy / (this.carryCapacity / 100));
  };
  Creep.prototype.harvestSourceById = function(sId) {
    var source;
    source = this.room.find(global.FIND_SOURCES, {
      filter: {
        id: sId
      }
    })[0];
    this.harvestSource(source);
    return null;
  };
  Creep.prototype.harvestSource = function(source) {
    this.moveTo(source);
    this.harvest(source);
    return null;
  };
  Creep.prototype.harvestFirstSource = function() {
    var sources;
    sources = this.room.find(global.FIND_SOURCES);
    this.harvestSource(sources[0]);
    return null;
  };
  Creep.prototype.harvestClosestSource = function() {
    var source;
    source = this.pos.findClosest(global.FIND_SOURCES);
    this.harvestSource(source);
    return null;
  };
  Creep.prototype.harvestAssignedSource = function() {
    this.harvestSourceById(this.memory.sourceId);
    return null;
  };
  Creep.prototype.setStage = function(stage) {
    if (stage !== this.memory.stage) {
      this.memory.stage = stage;
      return this.notifyStateChange();
    }
  };
  Creep.prototype.getStage = function() {
    return this.memory.stage;
  };
  Creep.prototype.notifyStateChange = function() {
    return this.say(this.memory.stage);
  };
  Creep.prototype.isEnabled = function() {
    if (this.memory.isEnabled == null) {
      this.memory.isEnabled = true;
    }
    return this.memory.isEnabled;
  };
  Creep.prototype.setEnabled = function(flag) {
    if (flag) {
      this.say('Turn Off');
    } else {
      this.say('Turn On');
    }
    return this.memory.isEnabled = flag;
  };
  Creep.prototype.beforeTurn = function() {
    return this.deadCheck();
  };
  Creep.prototype.deadCheck = function() {
    if (this.ticksToLive === 1) {
      this.dropEnergy();
      return true;
    } else if (this.ticksToLive === 2) {
      this.say("Bye bye!");
    }
    return false;
  };
  Creep.prototype.chooseSource = function(reset) {
    var creep;
    if (reset == null) {
      reset = false;
    }
    creep = this;
    if (this.memory.sourceId || reset) {
      return null;
    } else {
      _.forEach(this.room.find(global.FIND_SOURCES), function(source) {
        var creepsForSource, sourceCreepAmount;
        sourceCreepAmount = source.harvesterLimit();
        creepsForSource = _.filter(Game.creepsByRole(this.memory.role), function(creep) {
          return creep.memory.sourceId === source.id;
        }, this);
        if (_.size(creepsForSource) < sourceCreepAmount) {
          return creep.memory.sourceId = source.id;
        }
      }, this);
    }
    return this.memory.sourceId;
  };
  Creep.prototype.saySource = function() {
    return this.say(this.memory.sourceId);
  };
  return this;
};
