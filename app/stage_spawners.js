// Generated by CoffeeScript 1.8.0
'use strict';
var createCreep, generateCreepName, initSpawners, spawnAttempt, spawner;

generateCreepName = function(prefix) {
  return prefix + '_' + Math.random().toString(36).substring(7);
};

createCreep = function(spawn, creep) {
  var body, memory, name, result, role;
  memory = {};
  if (typeof spawn === 'string') {
    spawn = Game.spawns[spawn];
  }
  if (typeof creep === 'string') {
    memory.role = creep;
  } else if (typeof creep === 'object') {
    if (!creep.role) {
      return global.ERR_INVALID_ARGS;
    }
    if (creep.memory && typeof creep.memory === 'object') {
      memory = _.cloneDeep(creep.memory);
    }
    memory.role = creep.role;
  } else {
    return global.ERR_INVALID_ARGS;
  }
  role = require("" + memory.role);
  body = role.build(spawn, memory);
  name = generateCreepName(memory.role);
  result = spawn.canCreateCreep(body, name);
  if (result === global.OK) {
    result = spawn.createCreep(body, name, memory);
    console.log('Spawner: Creating ' + name);
    if (typeof result !== 'string') {
      console.log('Unexpected error ' + result + ': cannot spawn ' + name + ' with role ' + memory.role);
    }
  }
  return result;
};

spawnAttempt = function(spawn, queue, priority) {
  var i, max, result;
  if (queue === void 0 || queue.length < 1) {
    return;
  }
  max = priority ? 1 : queue.length;
  i = 0;
  result = void 0;
  while (i < max) {
    result = createCreep(spawn, queue[i]);
    if (typeof result === 'string') {
      queue.splice(i, 1);
      return true;
    }
    switch (result) {
      case global.ERR_INVALID_ARGS:
        console.log('Spawner: Cannot find creep type with parameter' + JSON.stringify(queue[i]));
        break;
      case global.ERR_NOT_ENOUGH_ENERGY:
        break;
      default:
        console.log('Spawner: Unknown error ' + result + ' for creep ' + JSON.stringify(queue[i]));
    }
    i++;
  }
  if (i === queue.length || queue.length > 0 && priority) {
    return false;
  }
};

spawner = function(spawn) {
  if (Memory.spawns[spawn.name]) {
    if (spawnAttempt(spawn, Memory.spawns[spawn.name].spawnPriorityQueue, true) !== void 0) {
      return;
    }
    if (spawnAttempt(spawn, Memory.spawns[spawn.name].spawnQueue, false)) {
      return;
    }
  } else {
    newSpawn(spawn);
  }
  if (spawnAttempt(spawn, Memory.spawnPriorityQueue, true) !== void 0) {
    return;
  }
  if (spawnAttempt(spawn, Memory.spawnQueue, false)) {
    return;
  }
};

initSpawners = function() {
  var name, spawn, _results;
  Game.reinitSpawns();
  _results = [];
  for (name in Game.spawns) {
    spawn = Game.spawns[name];
    if (!spawn.spawning) {
      spawner(spawn);
      _results.push(spawn.creepAmountSupport());
    } else {
      _results.push(void 0);
    }
  }
  return _results;
};

module.exports = {
  createCreep: createCreep,
  initSpawners: initSpawners
};
